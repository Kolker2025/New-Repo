#BlueJ class context
comment0.target=notchess
comment0.text=\r\n\ \ \ \ notchess\ CSIS-225,\ a\ not-chess\ game\ where\ the\ goal\ is\ to\ lose\ all\ your\ pieces.\ If\ you\ have\ a\ \r\n\ \ \ \ move\ which\ can\ capture\ an\ opposing\ piece,\ that\ move\ must\ be\ played.\ Winner\ must\ lose\ \r\n\ \ \ \ all\ pieces\ or\ have\ fewest\ pieces\ in\ 50\ moves.\ \r\n\r\n\ \ \ \ @author\ Ira\ Goldstein\ (Framework)\r\n\ \ \ \ @author\ Christian\ Kolker\ and\ David\ Talone\ (finishers)\r\n\ \ \ \ @version\ Spring\ 2023\ \ \r\n
comment1.params=
comment1.target=void\ run()
comment1.text=\r\n\ The\ run\ method\ to\ set\ up\ the\ graphical\ user\ interface\ for\ the\ notChess\ board\r\n
comment10.params=
comment10.target=void\ Queening()
comment10.text=\r\n\ method\ makes\ any\ white\ pawn\ that\ reaches\ the\ top\ row\ of\ the\ chess\ board,\ the\ 8\ row,\ be\ promoted\ into\ a\ Queen\r\n\ and\ any\ black\ pawn\ that\ reaches\ the\ bottom\ row\ of\ the\ chess\ board,\ the\ 1\ row,\ be\ promoted\ into\ a\ Queen\r\n
comment11.params=start\ end
comment11.target=void\ whiteValidMove(myButton,\ myButton)
comment11.text=\r\n\ method\ checks\ using\ the\ two\ button\ presses\ by\ the\ user\ to\ see\ if\ white's\ move\ is\ a\ valid\ move\r\n\ The\ move\ is\ checked\ with\ the\ associated\ helper\ method\ of\ validMove\ in\ each\ ChessPiece's\ associated\ method.\ \r\n\ If\ the\ move\ is\ valid\ according\ to\ the\ piece\ and\ buttons,\ then\ the\ move\ is\ made\ and\ the\ information\ of\ move\ counter\ and\ \r\n\ switching\ to\ black's\ turn\ is\ made\ as\ well.\ \r\n\ \r\n\ Helper\ method\ in\ ChessPiece\ with\ associated\ piece\ type\ {validMove(myButton\ start,\ myButton\ end,\ myButton[][]\ buttons}\r\n\ \r\n\ @param\ start\ |\ myButton\ object\ that\ represents\ the\ initial\ starting\ button\ press\r\n\ @param\ end\ |\ myButton\ object\ that\ represents\ the\ last\ button\ press\ to\ initiate\ moving\ piece\r\n
comment12.params=start\ end
comment12.target=void\ blackValidMove(myButton,\ myButton)
comment12.text=\r\n\ method\ checks\ using\ the\ two\ button\ presses\ by\ the\ user\ to\ see\ if\ black's\ move\ is\ a\ valid\ move\r\n\ The\ move\ is\ checked\ with\ the\ associated\ helper\ method\ of\ validMove\ in\ each\ ChessPiece's\ associated\ method.\ \r\n\ If\ the\ move\ is\ valid\ according\ to\ the\ piece\ and\ buttons,\ then\ the\ move\ is\ made\ and\ the\ information\ of\ move\ counter\ and\ \r\n\ switching\ to\ white's\ turn\ is\ made\ as\ well.\ \r\n\ \r\n\ Helper\ method\ in\ ChessPiece\ with\ associated\ piece\ type\ {validMove(myButton\ start,\ myButton\ end,\ myButton[][]\ buttons}\r\n\ \r\n\ @param\ start\ |\ myButton\ object\ that\ represents\ the\ initial\ starting\ button\ press\r\n\ @param\ end\ |\ myButton\ object\ that\ represents\ the\ last\ button\ press\ to\ initiate\ moving\ piece\r\n
comment13.params=
comment13.target=void\ checkGameStatus()
comment13.text=\r\n\ method\ to\ check\ whether\ the\ game\ is\ over\ in\ these\ following\ ways\:\r\n\ \ \ \ \ \ \r\n\ \ \ \ \ \ either\ white\ or\ black\ has\ lost\ all\ of\ their\ pieces,\ then\ the\ winner\ is\ decided\ by\ such\r\n\ \ \ \ \ \ if\ white\ and\ black\ have\ both\ made\ 50\ moves,\ then\ whoever\ has\ the\ least\ number\ of\ pieces\ wins\r\n\ \ \ \ \ \ \ \ \ \ if\ black\ and\ white\ have\ same\ number\ of\ pieces\ and\ have\ exceeded\ move\ limit,\ then\ it\ is\ a\ tie\ game\r\n
comment14.params=e
comment14.target=void\ actionPerformed(java.awt.event.ActionEvent)
comment14.text=\r\n\ actionPerformed\ method.\ First,\ if\ the\ move\ limit\ for\ white\ and\ black\ is\ reached,\ then\ nothing\ happens\ \r\n\ as\ the\ game\ has\ ended.\ Else,\ we\ determine\ the\ source\ of\ the\ ActionEvent\ is\ from\ the\ Move\ button\ with\ text\ field\ input,\ \r\n\ or\ by\ two\ button\ clicks\ to\ initiate\ a\ move.\ \r\n\ \r\n\ For\ text\ field\ entry,\ we\ check\ if\ the\ input\ is\ a\ valid\ String,\ we\ check\ for\ all\ avaiable\ captures\ for\ the\ associated\ color\r\n\ then\ we\ check\ for\ the\ validity\ of\ the\ move.\ We\ clear\ the\ text\ field\ after\ everything\ is\ done,\ valid\ move\ or\ invalid\ move.\ \r\n\ \r\n\ For\ two\ button\ clicks,\ we\ store\ in\ the\ processed\ ArrayList\ the\ first\ button\ click,\ then\ we\ obtain\ the\ second\ press.\ \r\n\ For\ the\ respective\ color,\ we\ check\ the\ available\ capturable\ moves\ and\ then\ we\ check\ the\ validity\ of\ the\ moves.\ \r\n\ The\ processed\ ArrayList\ is\ cleared\ after\ this\ sequence\ is\ done.\ \r\n\ \r\n\ The\ move\ is\ displayed\ in\ form\ if\ it\ is\ valid,\ the\ message\ "INVALID\ MOVE\!"\ will\ display\ if\ the\ move\ is\ invalid,\ \r\n\ and\ the\ message\ "NEEDS\ TO\ CAPTURE\!"\ will\ display\ of\ a\ capturable\ move\ needs\ to\ be\ made\ and\ is\ not,\ and\ \r\n\ the\ message\ "OTHER\ COLOR\ NEEDS\ TO\ MOVE\ \!"\ if\ turn\ is\ made\ by\ the\ wrong\ color.\ \r\n\ \r\n\ All\ ArrayList's\ with\ possible\ capturable\ mves\ are\ cleared\ after\ sequences\ of\ checking\ valid\ moves\ are\ done.\ \r\n\ \r\n\ \r\n\ methods\ Queening\ and\ checkGameStatus\ are\ called\ at\ end\ for\ checks.\ \r\n\ \r\n\ @param\ e\ |\ ActionEvent\ object\ that\ triggers\ the\ actionPerformed\ method,\ either\ a\ button\ click\ or\ entry\ from\ text\ field\ \r\n\ \r\n
comment15.params=
comment15.target=void\ computerMode()
comment15.text=\r\n\ computer\ mode.\ This\ computer\ will\ always\ play\ black\ and\ proceeds\ as\ the\ following\:\r\n\ \r\n\ the\ computer\ will\ prioritize\ capturing\ white\ pieces.\ If\ capturable\ moves\ are\ available,\ then\ \r\n\ it\ will\ randomly\ select\ a\ piece\ that\ can\ capture\ and\ perform\ the\ move.\ \r\n\ \r\n\ If\ there\ are\ no\ capturable\ pieces,\ the\ computer\ will\ obtain\ all\ of\ black's\ possible\ positions\ to\ move,\ \r\n\ randomly\ select\ one\ of\ the\ positions\ and\ find\ the\ piece\ that\ can\ perform\ such\ move\ and\ execute\ the\ move.\ \r\n\ \r\n\ then\ clear\ all\ information\ for\ next\ move\ with\ new\ information.\ \r\n
comment16.params=args
comment16.target=void\ main(java.lang.String[])
comment16.text=\r\n\ main\ method\r\n\ \r\n\ checks\ for\ command\ line\ arguemnts\:\ "H"\ is\ human\ mode,\ "C"\ is\ computer\ move\r\n
comment2.params=input
comment2.target=boolean\ checkValidStringforTF(java.lang.String)
comment2.text=\r\n\ method\ to\ check\ whether\ the\ String\ that\ is\ inputted\ into\ the\ text\ field\ is\ a\ valid\ String\ for\ a\ valid\ move\ \r\n\ the\ String\ is\ checked\ by\ checking\ the\ length\ to\ be\ five,\ the\ first\ character\ of\ the\ string\ to\ be\ \r\n\ a\ valid\ type\ of\ chess\ piece\:\ R,N,B,K,Q,P,\ the\ second\ and\ fourth\ characters\ to\ be\ \r\n\ a\ valid\ column\ entry\ i.e.\ A-H,\ and\ the\ third\ and\ fifth\ characters\ to\ be\ a\ valid\ row\ entry\ i.e.\ 1-8\r\n\ \r\n\ @param\ input\ |\ String\ that\ the\ user\ has\ inputted\ into\ the\ text\ field\r\n\ \r\n\ @return\ boolean\ value\ of\ whether\ the\ input\ is\ a\ valid\ String\ for\ implementing\ a\ valid\ move\r\n
comment3.params=input
comment3.target=java.lang.String\ stringToButton(java.lang.String)
comment3.text=\r\n\ method\ to\ transcibe\ the\ String\ representation\ of\ a\ button\ to\ a\ String\ of\ coordinates\ to\ the\ button\ in\ the\ 8x8\ button\ matrix\r\n\ \r\n\ @param\ input\ |\ String\ representation\ of\ a\ button\r\n\ \r\n\ @return\ |\ String\ of\ coordinates\ to\ the\ button\ in\ the\ 8x8\ button\ matrix\r\n
comment4.params=cord
comment4.target=java.lang.String\ cordsToString(java.awt.Point)
comment4.text=\r\n\ method\ to\ transcribe\ the\ coordinates\ of\ a\ button\ in\ the\ 8x8\ button\ matrix\ represented\ as\ a\ Point\ object\ to\ a\ String\ representation\ \r\n\ \r\n\ @param\ cord\ |\ Point\ object\ containing\ the\ coordinates\ of\ a\ button\ in\ the\ 8x8\ button\ matrix\r\n\ \r\n\ @return\ String\ representation\ of\ the\ coordinates\ of\ the\ button\ \r\n
comment5.params=p
comment5.target=myButton\ cordsToButton(java.awt.Point)
comment5.text=\r\n\ method\ to\ change\ a\ set\ of\ coordinates\ to\ a\ myButton\ object\ on\ the\ chess\ board\ to\ the\ \r\n\ appropiate\ row\ and\ column\ number.\ \r\n\ \r\n\ @param\ p\ |\ Point\ of\ coordinates\ to\ change\ into\ a\ myButton\ object\ on\ the\ chess\ board\r\n\ @return\ myButton\ object\ on\ the\ chess\ board\ of\ the\ desired\ Point\ object\r\n
comment6.params=
comment6.target=java.util.ArrayList\ checkWhitePiecesCapture()
comment6.text=\r\n\ method\ to\ calculate\ all\ white\ pieces\ that\ are\ on\ the\ chess\ board\ moves\ that\ involve\ capturing\r\n\ a\ opposing\ black\ piece.\ These\ moves\ are\ stored\ as\ Points\ in\ an\ returned\ ArrayList.\ \r\n\ \r\n\ Helper\ method\ in\ ChessPiece\ with\ associated\ piece\ type\ {canTake(myButton\ start,\ myButton[][]\ buttons}\r\n\ \r\n\ @return\ ArrayList<Point>\ |\ ArrayList\ of\ points\ of\ all\ white's\ pieces\ capturable\ moves\r\n
comment7.params=
comment7.target=java.util.ArrayList\ checkBlackPiecesCapture()
comment7.text=\r\n\ method\ to\ calculate\ all\ black\ pieces\ that\ are\ on\ the\ chess\ board\ moves\ that\ involve\ capturing\r\n\ a\ opposing\ white\ piece.\ These\ moves\ are\ stored\ as\ Points\ in\ an\ returned\ ArrayList.\ \r\n\ \r\n\ Helper\ method\ in\ ChessPiece\ with\ associated\ piece\ type\ {canTake(myButton\ start,\ myButton[][]\ buttons}\r\n\ \r\n\ @return\ ArrayList<Point>\ |\ ArrayList\ of\ points\ of\ all\ black's\ pieces\ capturable\ moves\r\n
comment8.params=
comment8.target=java.util.ArrayList\ checkWhitePossiblePositions()
comment8.text=\r\n\ method\ to\ check\ all\ of\ white's\ possible\ moves\ currently\ on\ the\ chess\ board.\ Used\ for\ checking\ the\ game\ status\ and\ \r\n\ the\ potential\ for\ a\ stalemate.\ \r\n\ \r\n\ @return\ ArrayList<Point>\ \:\ all\ of\ white's\ possible\ moves\ stored\ in\ an\ ArrayList\ that\ is\ returned\r\n
comment9.params=
comment9.target=java.util.ArrayList\ checkBlackPossiblePositions()
comment9.text=\r\n\ method\ to\ check\ all\ of\ black's\ possible\ moves\ currently\ on\ the\ chess\ board.\ Used\ for\ checking\ the\ game\ status\ and\ \r\n\ the\ potential\ for\ a\ stalemate.\ \r\n\ \r\n\ @return\ ArrayList<Point>\ \:\ all\ of\ black's\ possible\ moves\ stored\ in\ an\ ArrayList\ that\ is\ returned\r\n
numComments=17
